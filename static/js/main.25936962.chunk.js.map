{"version":3,"sources":["recipe.module.css","recipedetails.js","recipes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipedetails","props","useState","show","setShow","handleClose","console","log","values","Re","totalNutrients","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","totalTime","totalWeight","Footer","Recipes","Container","Row","Col","sm","md","Card","Img","className","classes","image","src","label","Badge","Text","ingredients","map","ing","key","toString","text","App","Recipe","setRecipe","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","Navbar","bg","Brand","href","style","height","width","Nav","Form","inline","onSubmit","e","preventDefault","FormControl","type","placeholder","value","onChange","target","color","Rec","Key","index","recipe","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25936962.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"recipe_image__G6ofM\"};","\r\nimport React from 'react';\r\nimport {useEffect,useState} from 'react';\r\n// import classes from \"./recipe.module.css\";\r\nimport {Button,Modal} from 'react-bootstrap'\r\n\r\nfunction  Recipedetails(props) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  console.log(props.values.Re.totalNutrients);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow}>\r\n        check Details\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n      \r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Recipe details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body> \r\n       <>\r\n       <h3>Total time:{props.values.Re.totalTime} </h3>\r\n       <h3>Total Weight:<br></br>{props.values.Re.totalWeight}</h3>\r\n      \r\n       \r\n      </>\r\n        </Modal.Body>\r\n        \r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Ok\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Recipedetails;\r\n","import React from \"react\";\r\nimport classes from \"./recipe.module.css\";\r\nimport Recipedetails from './recipedetails';\r\n\r\nimport {Container,Row, Col,Card,Button,Badge} from 'react-bootstrap';\r\n\r\n\r\n\r\nconst Recipes = (props)=> {\r\n    \r\n return(\r\n\r\n<Container>\r\n       \r\n<Row>\r\n        <Col sm={12} md={8}>\r\n            <Card>\r\n                     <Card.Img className={classes.image} variant=\"Top\" src={props.Re.image} />\r\n                    <Card.Body>\r\n                        <Card.Title> {props.Re.label} {<Recipedetails values={props}/>} </Card.Title>\r\n\r\n                        <Button variant=\"primary\">Buy Now </Button><Badge variant=\"danger\">Hot</Badge>\r\n                        <Badge variant=\"info\">4.5$</Badge>\r\n                    </Card.Body>\r\n             </Card>\r\n    </Col>\r\n    \r\n    <Col sm={12} md={4}>\r\n            <Card>\r\n                <Card.Img variant=\"Top\"/>\r\n                <Card.Body>\r\n                    <Button variant=\"primary\">Ingredients</Button>\r\n                     <Card.Text>\r\n                        \r\n                        {props.Re.ingredients.map(ing =>(<li key={ing.toString()} >{ing.text}</li> ))}\r\n                        \r\n                    </Card.Text>  \r\n                </Card.Body>\r\n            </Card>\r\n    </Col>\r\n\r\n\r\n</Row>\r\n</Container>\r\n\r\n );\r\n};\r\nexport default Recipes;  ","import React,{useEffect,useState} from 'react';\nimport Recipes from './recipes';\nimport { GiKnifeFork } from \"react-icons/gi\";\nimport {Navbar,Nav,Button,FormControl,Form} from 'react-bootstrap';\n\n\n\n// import {BrowserRouter,Route , Switch} from 'react-router-dom';\n\n\n\n\n\nconst App = () => {\n  \n  const appId = \"443128ff\";\n  const appKey= \"98f479697e754e8e957f7c4de22523de\";\n  \n  \n  const [Recipe , setRecipe] = useState([]);\n  const [search, setSearch]= useState('');\n  const [query,setQuery] =useState('chicken')\n  \n  //called each time page renders so getRecipe called once and each time for query changes\n  useEffect(()=>{\n    getRecipe();\n  },[query]);\n\n\n  //Request Api\n  const getRecipe = async ()=> {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${appId}&app_key=${appKey}`);\n    const data = await response.json();\n   \n    setRecipe(data.hits);\n    console.log(data.hits);\n}\n \n\n\nconst updateSerach= e => {\n   const value = e.target.value;\n  \n     setSearch(value);\n   \n  \n }\n const getSearch = e => {\n   e.preventDefault();\n   setQuery(search);\n   setSearch('');\n\n  }\n\n\n  return(\n<>\n  <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\"><GiKnifeFork style={{height:\"90px\" ,width:\"90px\"}}  />Recipe Search App</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n           \n            \n          </Nav>\n      \n      <Form inline onSubmit={getSearch}>\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" value={search} onChange={updateSerach} />\n        <Button  style={{color:\"white\"}} type=\"submit\" variant=\"outline-info\">Search</Button>\n      </Form>\n  </Navbar>\n     \n   \n    \n     <div className=\"recipes\">\n          \n            {Recipe.map(Rec =>(\n              <Recipes Key={Rec.index} Re={Rec.recipe}/> \n              ))}\n      </div>\n</>\n   \n  );\n  }\nexport default App;  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}